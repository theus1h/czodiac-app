import React from "react"
import Card from "@components/common/Card"
import BannerCard from "@components/common/Card/BannerCard"
import MainLayout from "@components/common/Layout/Main"
import Stepper from "@components/common/Stepper"
import * as Table from "@components/common/Table"
import Head from "next/head"
import Button from "@components/common/Button"
import { ArrowDropDown, ArrowDropUp } from "@components/common/Icons"
import { tokenAmtToShortString, weiToShortString } from "@utils/bnDisplay"
import TokenPair from "@components/common/TokenPair"
import FarmDetail from "@components/farms/FarmDetail"
import FarmFilter from "@components/farms/FarmFilter"
import { useFilteredFarms } from "@components/farms/hooks"

const POOL_STEPS = ["DEX", "Add Liquidity", "Stake LP in farm", "Earn"]

const defaultHeaders = [
  {
    name: "pair",
    label: "",
    isSortable: false,
    render: () => <Button className="bg-accent-100 text-accent-500">HOT</Button>,
  },
  { name: "token", label: "Token", isSortable: true, render: undefined },
  { name: "apr", label: "APR", isSortable: true, render: undefined },
  { name: "liquidity", label: "Liquidity", isSortable: true, render: undefined },
  { name: "earned", label: "Earned", isSortable: true, render: undefined },
  { name: "other", label: "", isSortable: false, render: undefined },
]

export default function Page() {
  const [rowsExpanded, setRowsExpanded] = React.useState({})
  const [sortColumn, setSortColumn] = React.useState()

  const { pools } = useFilteredFarms()

  // TODO: Sort pools, not rows
  // rows.sort((a, b) => a.find((e) => e.name === sortColumn)?.value > b.find((e) => e.name === sortColumn)?.value)

  // TODO: Initialize `rowsExpanded` when filter changes

  const getRowDetail = (pool, index) => {
    const apr = pool.aprBasisPoints.toNumber() / 100
    const liquidity = weiToShortString(pool.usdValue, 2)
    const earnedAmount = tokenAmtToShortString(pool.userInfo.rewardPending, pool.rewardDecimals, 2)

    return [
      {
        name: "pair",
        align: "center",
        value: pool.name,
        render: () => <TokenPair src="CZF" srcName="CZF" dst={pool.logo} dstName={pool.name} />,
      },
      {
        name: "token",
        value: pool.name,
        align: "center",
        render: () => <span className="font-semibold text-subheader text-black-neutral-1000">{`${pool.name}`}</span>,
      },
      {
        name: "apr",
        value: apr,
        align: "center",
        render: () => <span className="font-semibold text-subheader text-black-neutral-1000">{`${apr}%`}</span>,
      },
      {
        name: "liquidity",
        value: liquidity,
        align: "center",
        render: () => <span className="font-semibold text-subheader text-black-neutral-1000">${liquidity}</span>,
      },
      {
        name: "earned",
        value: earnedAmount,
        align: "center",
        render: () => <span className="font-semibold text-subheader text-accent-400">{earnedAmount}</span>,
      },
      {
        name: "other",
        render: () => (
          <Button
            rightIcon={rowsExpanded[index] ? <ArrowDropUp /> : <ArrowDropDown />}
            onClick={() => setRowsExpanded((prev) => ({ ...prev, [index]: !prev[index] }))}
          >
            {rowsExpanded[index] ? "Hide" : "Show More"}
          </Button>
        ),
      },
    ]
  }

  return (
    <div className="flex flex-col space-y-6">
      <Head>
        <title>CZodiac - Pools</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <BannerCard name="farm" className="z-50 flex flex-col justify-center text-center p-7 text-white-neutral-0">
        <h1 className="z-50 font-bold text-title">CZ Farms</h1>
        <h2 className="z-50 font-semibold text-header">Stake LP tokens to earn CZF</h2>
        <div className="w-3/5 mx-auto my-6">
          <Stepper steps={POOL_STEPS} />
        </div>
      </BannerCard>

      <FarmFilter />

      <Card className="w-full">
        <Table.Root>
          <Table.Head headers={defaultHeaders} sortBy={setSortColumn}></Table.Head>
          <Table.Body>
            {pools.map((pool, idx) => (
              <Table.Row
                key={idx}
                index={idx}
                columns={getRowDetail(pool, idx)}
                expanded={rowsExpanded[idx]}
                className="flex space-x-6"
              >
                {/* <FarmDetail pool={pool} /> */}
              </Table.Row>
            ))}
          </Table.Body>
        </Table.Root>
      </Card>
    </div>
  )
}

Page.getLayout = function getLayout(page) {
  return <MainLayout>{page}</MainLayout>
}
